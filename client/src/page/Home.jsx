import React, { useEffect, useState } from 'react';

import { SocialCard, FormField, Loader } from '../components';

const RenderCards = ({ data, title, onLike, onComment }) => {
  if (data?.length > 0) {
    return (
      data.map((post) => (
        <SocialCard 
          key={post._id} 
          {...post} 
          onLike={onLike}
          onComment={onComment}
        />
      ))
    );
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [trendingPosts, setTrendingPosts] = useState(null);
  const [activeTab, setActiveTab] = useState('all'); // 'all' or 'trending'

  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('https://dalle-arbb.onrender.com/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data);
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  const fetchTrendingPosts = async () => {
    try {
      const response = await fetch('https://dalle-arbb.onrender.com/api/v1/post/trending', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setTrendingPosts(result.data);
      }
    } catch (err) {
      console.error('Error fetching trending posts:', err);
    }
  };

  useEffect(() => {
    fetchPosts();
    fetchTrendingPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const currentPosts = activeTab === 'trending' ? trendingPosts : allPosts;
        const searchResult = currentPosts.filter((item) => 
          item.name.toLowerCase().includes(searchText.toLowerCase()) || 
          item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  const handleLike = async (postId, userId) => {
    try {
      const response = await fetch(`https://dalle-arbb.onrender.com/api/v1/post/${postId}/like`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId }),
      });

      if (response.ok) {
        // Refresh posts to get updated data
        fetchPosts();
        fetchTrendingPosts();
      }
    } catch (error) {
      console.error('Error liking post:', error);
    }
  };

  const handleComment = async (postId, userId, userName, text) => {
    try {
      const response = await fetch(`https://dalle-arbb.onrender.com/api/v1/post/${postId}/comment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId, userName, text }),
      });

      if (response.ok) {
        // Refresh posts to get updated data
        fetchPosts();
        fetchTrendingPosts();
      }
    } catch (error) {
      console.error('Error adding comment:', error);
    }
  };

  const currentPosts = activeTab === 'trending' ? trendingPosts : allPosts;

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
      </div>

      {/* Tab Navigation */}
      <div className="mt-8">
        <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
          <button
            onClick={() => setActiveTab('all')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'all'
                ? 'bg-white text-gray-900 shadow-sm'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            All Posts
          </button>
          <button
            onClick={() => setActiveTab('trending')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'trending'
                ? 'bg-white text-gray-900 shadow-sm'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            ðŸ”¥ Trending
          </button>
        </div>
      </div>

      <div className="mt-8">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing Results for <span className="text-[#222328]">{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-3 sm:grid-cols-2 xs:grid-cols-1 grid-cols-1 gap-6">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                  onLike={handleLike}
                  onComment={handleComment}
                />
              ) : (
                <RenderCards
                  data={currentPosts}
                  title={activeTab === 'trending' ? "No Trending Posts Yet" : "No Posts Yet"}
                  onLike={handleLike}
                  onComment={handleComment}
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
